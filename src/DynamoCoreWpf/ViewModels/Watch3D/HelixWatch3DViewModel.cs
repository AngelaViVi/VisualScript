using System;
using System.Linq;
using Dynamo.Graph.Nodes;
using Dynamo.Logging;
using Dynamo.Wpf.Properties;
using Dynamo.Visualization;



namespace Dynamo.Wpf.ViewModels.Watch3D
{
    /// <summary>
    /// The HelixWatch3DViewModel establishes a full rendering 
    /// context using the HelixToolkit. An instance of this class
    /// can act as the data source for a <see cref="Watch3DView"/>
    /// </summary>
    public class HelixWatch3DViewModel : DefaultWatch3DViewModel
    {
        #region private members

        private const string TextKey = ":text";

        #endregion

        #region events
        /// <summary>
        /// An envent requesting to create geometries from render packages.
        /// </summary>
        public event Action<RenderPackageCache, bool> RequestCreateModels;
        private void OnRequestCreateModels(RenderPackageCache packages, bool forceAsyncCall = false)
        {
            if (RequestCreateModels != null)
            {
                RequestCreateModels(packages, forceAsyncCall);
            }
        }

        /// <summary>
        /// An event requesting to remove geometries generated by the node.
        /// </summary>
        public event Action<NodeModel> RequestRemoveModels;
        private void OnRequestRemoveModels(NodeModel node)
        {
            if (RequestRemoveModels != null)
            {
                RequestRemoveModels(node);
            }
        }


        #endregion


        /// <summary>
        /// Attempt to create a HelixWatch3DViewModel. If one cannot be created,
        /// fall back to creating a DefaultWatch3DViewModel and log the exception.
        /// </summary>
        /// <param name="model">The NodeModel to associate with the returned view model.</param>
        /// <param name="parameters">A Watch3DViewModelStartupParams object.</param>
        /// <param name="logger">A logger to be used to log the exception.</param>
        /// <returns></returns>
        public static DefaultWatch3DViewModel TryCreateHelixWatch3DViewModel(NodeModel model, Watch3DViewModelStartupParams parameters, DynamoLogger logger)
        {
            try
            {
                var vm = new HelixWatch3DViewModel(model, parameters);
                return vm;
            }
            catch (Exception ex)
            {
                logger.Log(Resources.BackgroundPreviewCreationFailureMessage, LogLevel.Console);
                logger.Log(ex.Message, LogLevel.File);

                var vm = new DefaultWatch3DViewModel(model, parameters)
                {
                    Active = false,
                    CanBeActivated = false
                };
                return vm;
            }
        }

        protected HelixWatch3DViewModel(NodeModel model, Watch3DViewModelStartupParams parameters) 
        : base(model, parameters)
        {
            Name = Resources.BackgroundPreviewName;
        }

        public override void RemoveGeometryForNode(NodeModel node)
        {
            if (Active)
            {
                // Raise request for model objects to be deleted on the UI thread.
                OnRequestRemoveModels(node);
            }
        }

        public override void AddGeometryForRenderPackages(RenderPackageCache packages, bool forceAsyncCall = false)
        {
            if (Active)
            {
                // Raise request for model objects to be created on the UI thread.
                OnRequestCreateModels(packages, forceAsyncCall);
            }
        }

        #region private methods

        /// <summary>
        /// Display a label for geometry based on the paths.
        /// </summary>
        public override void AddLabelForPath(string path)
        {
            // make var_guid from var_guid:0:1
            var nodePath = path.Contains(':') ? path.Remove(path.IndexOf(':')) : path;
            var labelName = nodePath + TextKey;
        }

        /// <summary>
        /// Remove the labels (in Watch3D View) for geometry once the Watch node is disconnected
        /// </summary>
        /// <param name="path"></param>
        public override void ClearPathLabel(string path)
        {
            var nodePath = path.Contains(':') ? path.Remove(path.IndexOf(':')) : path;
            var labelName = nodePath + TextKey;
        }

        #endregion

    }
}
